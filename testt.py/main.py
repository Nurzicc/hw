# import sqlite3
# import random
# import string
# import logging
# from datetime import datetime
# from aiogram import Bot, Dispatcher, F, types
# from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
# from aiogram.filters import Command
# from aiogram.fsm.state import State, StatesGroup
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.storage.memory import MemoryStorage
# from config import token

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
# logger = logging.getLogger(__name__)

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# bot = Bot(token=token)
# dp = Dispatcher(storage=MemoryStorage())

# conn = sqlite3.connect("visa_card.db", check_same_thread=False)
# cursor = conn.cursor()

# # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# cursor.execute("""
# CREATE TABLE IF NOT EXISTS users (
#     user_id INTEGER PRIMARY KEY,
#     name TEXT,
#     surname TEXT,
#     passport TEXT,
#     email TEXT,
#     password TEXT,
#     registration_date TEXT
# )
# """)
# conn.commit()

# # –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
# class RegistrationState(StatesGroup):
#     waiting_for_name = State()
#     waiting_for_surname = State()
#     waiting_for_passport = State()
#     waiting_for_email = State()

# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è
# def generate_password(length=8):
#     return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

# # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# def main_menu():
#     return InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="start_registration")],
#         [InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")],
#         [InlineKeyboardButton(text="‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã", callback_data="help")]
#     ])

# # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
# def back_button():
#     return InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_registration")]
#     ])

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
# @dp.message(Command("start"))
# async def start_command(message: types.Message):
#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
#     await message.answer(
#         "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É Visa Card!\n"
#         "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
#         "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
#         "/help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥",
#         reply_markup=main_menu()
#     )

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
# @dp.message(Command("help"))
# async def help_command(message: types.Message):
#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")
#     await message.answer(
#         "‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
#         "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
#         "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
#         "üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.\n"
#         "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.",
#         reply_markup=main_menu()
#     )

# # –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
# @dp.callback_query(lambda c: c.data == "start_registration")
# async def start_registration(callback: types.CallbackQuery, state: FSMContext):
#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
#     await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=back_button())
#     await state.set_state(RegistrationState.waiting_for_name)

# # –í–≤–æ–¥ –∏–º–µ–Ω–∏
# @dp.message(F.state == RegistrationState.waiting_for_name)
# async def enter_name(message: types.Message, state: FSMContext):
#     if not message.text or len(message.text.strip()) < 2:
#         await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤).")
#         return
#     await state.update_data(name=message.text.strip())
#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –∏–º—è: {message.text}")
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:", reply_markup=back_button())
#     await state.set_state(RegistrationState.waiting_for_surname)

# # –í–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏
# @dp.message(F.state == RegistrationState.waiting_for_surname)
# async def enter_surname(message: types.Message, state: FSMContext):
#     if not message.text or len(message.text.strip()) < 2:
#         await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é (–Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤).")
#         return
#     await state.update_data(surname=message.text.strip())
#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª —Ñ–∞–º–∏–ª–∏—é: {message.text}")
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞:", reply_markup=back_button())
#     await state.set_state(RegistrationState.waiting_for_passport)

# # –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞
# @dp.message(F.state == RegistrationState.waiting_for_passport)
# async def enter_passport(message: types.Message, state: FSMContext):
#     if not message.text or not message.text.strip().isdigit():
#         await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
#         return
#     await state.update_data(passport=message.text.strip())
#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: {message.text}")
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à EMAIL:", reply_markup=back_button())
#     await state.set_state(RegistrationState.waiting_for_email)

# # –í–≤–æ–¥ email
# @dp.message(F.state == RegistrationState.waiting_for_email)
# async def enter_email(message: types.Message, state: FSMContext):
#     if "@" not in message.text or "." not in message.text:
#         await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π EMAIL.")
#         return
#     user_data = await state.get_data()
#     user_data['email'] = message.text.strip()
#     user_data['password'] = generate_password()
#     user_data['registration_date'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

#     cursor.execute("""
#     INSERT INTO users (user_id, name, surname, passport, email, password, registration_date) 
#     VALUES (?, ?, ?, ?, ?, ?, ?)
#     """, (message.from_user.id, user_data['name'], user_data['surname'], user_data['passport'],
#           user_data['email'], user_data['password'], user_data['registration_date']))
#     conn.commit()

#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {user_data}")
#     await message.answer(
#         f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í–∞—à –ø–∞—Ä–æ–ª—å: {user_data['password']}\n"
#         "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.",
#         reply_markup=main_menu()
#     )
#     await state.clear()

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
# @dp.callback_query(lambda c: c.data == "cancel_registration")
# async def cancel_registration(callback: types.CallbackQuery, state: FSMContext):
#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
#     await state.clear()
#     await callback.message.edit_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# # –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
# @dp.callback_query(lambda c: c.data == "profile")
# async def view_profile(callback: types.CallbackQuery):
#     cursor.execute("SELECT name, surname, passport, email, registration_date FROM users WHERE user_id = ?", (callback.from_user.id,))
#     user = cursor.fetchone()
#     if user:
#         profile_text = (f"üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
#                         f"–ò–º—è: {user[0]}\n"
#                         f"–§–∞–º–∏–ª–∏—è: {user[1]}\n"
#                         f"–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: {user[2]}\n"
#                         f"EMAIL: {user[3]}\n"
#                         f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[4]}")
#         logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ—Ñ–∏–ª—å")
#         await callback.message.edit_text(profile_text, reply_markup=main_menu())
#     else:
#         logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
#         await callback.message.edit_text("‚ùå –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=main_menu())

# async def main():
#     try:
#         await dp.start_polling(bot)
#     finally:
#         await bot.session.close()

# if __name__ == "__main__":
#     import asyncio
#     asyncio.run(main())
